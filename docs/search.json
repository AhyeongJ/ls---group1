[
  {
    "objectID": "practice presentation_240716.html",
    "href": "practice presentation_240716.html",
    "title": "practice presentation",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "practice presentation_240716.html#quarto",
    "href": "practice presentation_240716.html#quarto",
    "title": "practice presentation",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "practice presentation_240716.html#running-code",
    "href": "practice presentation_240716.html#running-code",
    "title": "practice presentation",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n2"
  },
  {
    "objectID": "presentation 0.html",
    "href": "presentation 0.html",
    "title": "presentation 0",
    "section": "",
    "text": "필요한 패키지 불러오기\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n\n데이터 불러오기\n\nmarket = pd.read_excel(\"data/traditionalmarket.xlsx\")\nmarket2 = market.copy()\n\n\n\n변수명 재설정하기\n\nmarket2 = market2.rename(columns = {\"시장명\" : \"market_name\", \n                                    \"시장유형\" : \"type\",\n                                    \"소재지도로명주소\" : \"open_period\",\n                                    \"소재지지번주소\" : \"address_old\",\n                                    \"점포수\" : \"market_count\",\n                                    \"사용가능상품권\" : \"certificate\",\n                                    \"공중화장실 보유여부\" :\"public_toilet\",\n                                    \"주차장 보유여부\" : \"parking_lot\",\n                                    \"개설년도\" : \"year\",\n                                    \"데이터기준일자\" : \"data_date\"})\n\n\n\n데이터 변수별 요약통계량과 정보 확인하기\n\nmarket2['market_count'].describe()\nmarket2[\"public_toilet\"].info()\nmarket2[\"parking_lot\"].info()\n\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: public_toilet\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: parking_lot\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n\n\n\n\nmarket_scale 파생변수 생성과 막대그래프 확인\n\nplt.clf()\nmarket2 = market2.assign(market_scale = np.where(market2[\"market_count\"] &gt;= 134, \"large\", \n                                        np.where(market2[\"market_count\"] &gt;= 50, \"medium\", \"small\")))\nsns.countplot(data = market2, x = 'market_scale', hue = 'market_scale')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nconv_level 파생변수 생성과 막대그래프 확인\n\nplt.clf()\nmarket2['conv_level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\nsns.countplot(data = market2, x = 'conv_level', hue = 'conv_level')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n시장유형 및 점포규모의 시장개수 알아보기\n\ndf = market2.groupby([\"type\", \"market_scale\"], as_index = False) \\\n            .agg(market_count = (\"market_scale\", \"count\"))\ndf.sort_values('market_count', ascending = False)\n\n\n\n\n\n\n\n\ntype\nmarket_scale\nmarket_count\n\n\n\n\n1\n상설\nmedium\n532\n\n\n0\n상설\nlarge\n281\n\n\n2\n상설\nsmall\n189\n\n\n4\n상설+정기\nmedium\n145\n\n\n8\n정기\nsmall\n117\n\n\n3\n상설+정기\nlarge\n66\n\n\n5\n상설+정기\nsmall\n48\n\n\n7\n정기\nmedium\n46\n\n\n6\n정기\nlarge\n15\n\n\n\n\n\n\n\n\n\n막대그래프로 알아보기\n\nplt.clf()\nsns.barplot(data = df, x = 'type', y = 'market_count', hue = 'market_scale')\nplt.show()\n\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 49345 (\\N{HANGUL SYLLABLE SANG}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 49444 (\\N{HANGUL SYLLABLE SEOL}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 51221 (\\N{HANGUL SYLLABLE JEONG}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)"
  },
  {
    "objectID": "presentation1/presentation1.html",
    "href": "presentation1/presentation1.html",
    "title": "Presentation2",
    "section": "",
    "text": "필요한 패키지 불러오기\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n\n데이터 불러오기\n\nmarket = pd.read_excel(\"C:/Users/User/Documents/LS 빅데이터 스쿨/ls_group1/data/traditionalmarket.xlsx\")\nmarket2 = market.copy()\n\n\n\n변수명 재설정하기\n\nmarket2 = market2.rename(columns = {\"시장명\" : \"market_name\", \n                                    \"시장유형\" : \"type\",\n                                    \"소재지도로명주소\" : \"adress_road\",\n                                    \"시장개설주기\" :  \"open_period\",\n                                    \"소재지지번주소\" : \"address_old\",\n                                    \"점포수\" : \"market_count\",\n                                    \"사용가능상품권\" : \"certificate\",\n                                    \"공중화장실 보유여부\" :\"public_toilet\",\n                                    \"주차장 보유여부\" : \"parking_lot\",\n                                    \"개설년도\" : \"year\",\n                                    \"데이터기준일자\" : \"data_date\"})\n\n\n\n변수별 요약통계량과 정보 확인하기\n\n시장데이터 중복 없는가?\n\n\n# 중복된 데이터 추출\nmarket2[market2['market_name'].duplicated(keep=False)]['market_name'] \n# keep = False :첫 번째 항목과 마지막 항목을 포함하여 모든 중복 항목을 중복으로 간주 \n# 시장 이름은 같고 도로명 주소는 다름, 다른 시장 \n\n0       중앙시장\n26      자유시장\n27      중앙시장\n72      양곡시장\n76      중앙시장\n        ... \n1414    중앙시장\n1416    북부시장\n1418    사직시장\n1419    사창시장\n1436    남부시장\nName: market_name, Length: 110, dtype: object\n\n\n\n시장 유형 빈도 실펴보기\n\n\nmarket2['type'].value_counts()\n\ntype\n상설       1002\n상설+정기     259\n정기        178\nName: count, dtype: int64\n\n\n\n소재지도로명주소에서 시/도 만 추출해서 파생변수 region 생성\n\n\nmarket2['adress_road'].isna().sum()\nmarket2['region'] = market2['adress_road'].str.split().str[0]\nmarket2.head()\n\n\n\n\n\n\n\n\nmarket_name\ntype\nadress_road\nopen_period\naddress_old\nmarket_count\ncertificate\npublic_toilet\nparking_lot\nyear\ndata_date\nregion\n\n\n\n\n0\n중앙시장\n상설\n강원도 강릉시 금성로 21\n상설\n강원 강릉시 성남동 50번지\n229\n온누리상품권\nY\nY\n1980.0\n2015-12-31\n강원도\n\n\n1\n강릉동부시장\n상설\n강원도 강릉시 옥천로 48\n상설\n강원 강릉시 옥천동 223번지\n91\nNaN\nY\nN\n2014.0\n2015-12-31\n강원도\n\n\n2\n강릉서부시장\n상설\n강원도 강릉시 임영로 155번길 6\n상설\n강원 강릉시 용강동 29번지\n109\n온누리상품권\nY\nY\n1977.0\n2015-12-31\n강원도\n\n\n3\n주문진종합시장\n상설+정기\n강원도 강릉시 주문진읍 구 시장길\n5일\n강원 강릉시 주문진읍 주문리 321-52번지\n77\n온누리상품권\nY\nY\n2006.0\n2015-12-31\n강원도\n\n\n4\n주문진수산시장\n상설\n강원도 강릉시 주문진읍 시장1길 4-1\n상설\n강원 강릉시 주문진읍 주문리 312-91번지\n42\n온누리상품권\nY\nY\n2007.0\n2015-12-31\n강원도\n\n\n\n\n\n\n\n\n점포수\n\n\n# 점포 수 요약통계량 \nmarket2[\"market_count\"].describe().round(2)\nmarket2.iloc[market2[\"market_count\"].idxmax(),2]\n\n'서울특별시 중구 남대문시장 4길 21'\n\n\n\n오 이상치가 전혀 아니군 …!\nmarket_scale 파생변수 생성과 막대그래프 확인\n\nplt.clf()\n# 점포수의 제 1 사분위: 50, 제 3 사분위 134 기준으로 makret_scale 생성 \nmarket2 = market2.assign(market_scale = np.where(market2[\"market_count\"] &gt;= 134, \"large\",\n                                        np.where(market2[\"market_count\"] &gt;= 50, \"medium\", \"small\")))\nsns.countplot(data = market2, x = 'market_scale', hue = 'market_scale')\nplt.show()\n\n\n\n\n\n\n\n\n온누리 상품권 빈도\n\nmarket2['certificate'].value_counts()\n\ncertificate\n온누리상품권    1159\nName: count, dtype: int64\n\n\n공중화장실 보유여부\n\nmarket2['public_toilet'].value_counts()\nmarket2['parking_lot'].value_counts()\n\nparking_lot\nY    859\nN    580\nName: count, dtype: int64\n\n\nconv_level 파생변수 생성과 막대그래프 확인 conv_level 재수정할까?(화장실은 대부분 있는데, 주차장은 60%임) yes no no yes 현황 파악 다시 하기\n\nplt.clf()\nmarket2['conv_level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\nmarket2['conv_level'].value_counts()\nsns.countplot(data = market2, x = 'conv_level', hue = 'conv_level')\nplt.show()\n\n\n\n\n\n\n\n\n\nn_year = market2.groupby('year', as_index = False).agg(n = (\"year\", \"count\"))\nn_year\nsns.lineplot(data = n_year, x = \"year\", y = \"n\")\nplt.show()"
  },
  {
    "objectID": "presentation1.html",
    "href": "presentation1.html",
    "title": "Presentation2",
    "section": "",
    "text": "필요한 패키지 불러오기\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n\n데이터 불러오기\n\nmarket = pd.read_excel(\"C:/Users/User/Documents/LS 빅데이터 스쿨/ls_group1/data/traditionalmarket.xlsx\")\nmarket2 = market.copy()\n\n\n\n변수명 재설정하기\n\nmarket2 = market2.rename(columns = {\"시장명\" : \"market_name\", \n                                    \"시장유형\" : \"type\",\n                                    \"소재지도로명주소\" : \"adress_road\",\n                                    \"시장개설주기\" :  \"open_period\",\n                                    \"소재지지번주소\" : \"address_old\",\n                                    \"점포수\" : \"market_count\",\n                                    \"사용가능상품권\" : \"certificate\",\n                                    \"공중화장실 보유여부\" :\"public_toilet\",\n                                    \"주차장 보유여부\" : \"parking_lot\",\n                                    \"개설년도\" : \"year\",\n                                    \"데이터기준일자\" : \"data_date\"})\n\n\n\n변수별 요약통계량과 정보 확인하기\n\n시장데이터 중복 없는가?\n\n\n# 중복된 데이터 추출\nmarket2[market2['market_name'].duplicated(keep=False)]['market_name'] \n# keep = False :첫 번째 항목과 마지막 항목을 포함하여 모든 중복 항목을 중복으로 간주 \n# 시장 이름은 같고 도로명 주소는 다름, 다른 시장 \n\n0       중앙시장\n26      자유시장\n27      중앙시장\n72      양곡시장\n76      중앙시장\n        ... \n1414    중앙시장\n1416    북부시장\n1418    사직시장\n1419    사창시장\n1436    남부시장\nName: market_name, Length: 110, dtype: object\n\n\n\n시장 유형 빈도 실펴보기\n\n\nmarket2['type'].value_counts()\n\ntype\n상설       1002\n상설+정기     259\n정기        178\nName: count, dtype: int64\n\n\n\n소재지도로명주소에서 시/도 만 추출해서 파생변수 region 생성\n\n\nmarket2['adress_road'].isna().sum()\nmarket2['region'] = market2['adress_road'].str.split().str[0]\nmarket2.head()\n\n\n\n\n\n\n\n\nmarket_name\ntype\nadress_road\nopen_period\naddress_old\nmarket_count\ncertificate\npublic_toilet\nparking_lot\nyear\ndata_date\nregion\n\n\n\n\n0\n중앙시장\n상설\n강원도 강릉시 금성로 21\n상설\n강원 강릉시 성남동 50번지\n229\n온누리상품권\nY\nY\n1980.0\n2015-12-31\n강원도\n\n\n1\n강릉동부시장\n상설\n강원도 강릉시 옥천로 48\n상설\n강원 강릉시 옥천동 223번지\n91\nNaN\nY\nN\n2014.0\n2015-12-31\n강원도\n\n\n2\n강릉서부시장\n상설\n강원도 강릉시 임영로 155번길 6\n상설\n강원 강릉시 용강동 29번지\n109\n온누리상품권\nY\nY\n1977.0\n2015-12-31\n강원도\n\n\n3\n주문진종합시장\n상설+정기\n강원도 강릉시 주문진읍 구 시장길\n5일\n강원 강릉시 주문진읍 주문리 321-52번지\n77\n온누리상품권\nY\nY\n2006.0\n2015-12-31\n강원도\n\n\n4\n주문진수산시장\n상설\n강원도 강릉시 주문진읍 시장1길 4-1\n상설\n강원 강릉시 주문진읍 주문리 312-91번지\n42\n온누리상품권\nY\nY\n2007.0\n2015-12-31\n강원도\n\n\n\n\n\n\n\n\n점포수\n\n\n# 점포 수 요약통계량 \nmarket2[\"market_count\"].describe().round(2)\nmarket2.iloc[market2[\"market_count\"].idxmax(),2]\n\n'서울특별시 중구 남대문시장 4길 21'\n\n\n\n오 이상치가 전혀 아니군 …!\nmarket_scale 파생변수 생성과 막대그래프 확인\n\nplt.clf()\n# 점포수의 제 1 사분위: 50, 제 3 사분위 134 기준으로 makret_scale 생성 \nmarket2 = market2.assign(market_scale = np.where(market2[\"market_count\"] &gt;= 134, \"large\",\n                                        np.where(market2[\"market_count\"] &gt;= 50, \"medium\", \"small\")))\nsns.countplot(data = market2, x = 'market_scale', hue = 'market_scale')\nplt.show()\n\n\n\n\n\n\n\n\n온누리 상품권 빈도\n\nmarket2['certificate'].value_counts()\n\ncertificate\n온누리상품권    1159\nName: count, dtype: int64\n\n\n공중화장실 보유여부\n\nmarket2['public_toilet'].value_counts()\nmarket2['parking_lot'].value_counts()\n\nparking_lot\nY    859\nN    580\nName: count, dtype: int64\n\n\nconv_level 파생변수 생성과 막대그래프 확인 conv_level 재수정할까?(화장실은 대부분 있는데, 주차장은 60%임) yes no no yes 현황 파악 다시 하기\n\nplt.clf()\nmarket2['conv_level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\nmarket2['conv_level'].value_counts()\nsns.countplot(data = market2, x = 'conv_level', hue = 'conv_level')\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.clf()\nn_year = market2.groupby('year', as_index = False).agg(n = (\"year\", \"count\"))\nn_year\nsns.lineplot(data = n_year, x = \"year\", y = \"n\")\nplt.show()"
  },
  {
    "objectID": "ongoing.html",
    "href": "ongoing.html",
    "title": "전통시장 점포 규모와 인구비율에 관한 분석",
    "section": "",
    "text": "분석 목적\n전통시장 홍보 목적 가설 : 만약 인구가 많아도 점포수가 적으면 홍보 필요성이 생긴다. 여행 루트에 전통시장을 추가?\n2024년에 보도된 세계타임즈에서 KB국민카드의 전통시장 카드 소비 데이터 분석을 볼 수 있습니다. 전통시장의 연령별 매출 비중에서 40%는 60대 이상에서 발생되었습니다. 50대 26%, 40대 17%, 30대 10%, 20대 7%로 연령대가 높을수록 매출 비중이 높게 나타났습니다.\n시장은 인구가 많은 곳에 분포되어 있는데, 전통시장 또한 단순히 인구가 많은 곳이 점포수가 많은지? 주 고객층인 60대 이상이 많은 지역에 점포수가 많은지? 알고 싶었다.\n2015년 기준으로 60대 이상 비율이 높은 행정구역에 점포수가 많이 분포되어 있는지 분석하기. 이를 바탕으로 60대 비율이 적고, 인구가 많은 수도권, 광역시에 점포수가 많은지? 60대 이상 비율이 높고, 인구가 적은 구역에 점포수가 많은지 비교하기.\n\n나이 나누기\n0~19세 = age_under_20\n20~59세 = age_2050\n60~100세 이상 = age_over_60\n한국은 공공기관 및 일부 기업이 60세로 정년으로 두고 있기 때문에 위와 같이 노년의 기준을 60세 이상으로 정했습니다. 미국과 유럽은 60~65세 사이를 정년으로 두고 있습니다. 그리고\n\n\n\n점포수 크기에 따른 연령층 확인하기\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n2015년 12월 기준 인구조사 파일 불러오기\n\npop = pd.read_excel('data/pop_2015.xlsx')\nmarket2 = pd.read_excel('data/traditionalmarket.xlsx')\npop\npop.head()\n\n\n\n원본 숫자 안에 , 를 없애기 (문자열을 숫자열로 바꾸기)\n\ntype(pop)\npop.shape\npop\npop.iloc[:-1, 1:].str.replace(\",\",'')\n\n\npop.loc[1:18,1:14] = subset\npop = pop.iloc[0:18,0:14]\npop\n\n\n\n각 지역마다 연령층 비율 계산하기\n\npop_서울 = pop['총 인구수'][1]\npop_부산 = pop['총 인구수'][2]\npop_대구 = pop['총 인구수'][3]\npop_인천 = pop['총 인구수'][4]\npop_광주 = pop['총 인구수'][5]\npop_대전 = pop['총 인구수'][6]\npop_울산 = pop['총 인구수'][7]\npop_세종 = pop['총 인구수'][8]\npop_경기 = pop['총 인구수'][9]\npop_강원 = pop['총 인구수'][10]\npop_충북 = pop['총 인구수'][11]\npop_충남 = pop['총 인구수'][12]\npop_전북 = pop['총 인구수'][13]\npop_전남 = pop['총 인구수'][14]\npop_경북 = pop['총 인구수'][15]\npop_경남 = pop['총 인구수'][16]\npop_제주 = pop['총 인구수'][17]\n\n서울_유소년_비율 = (pop.iloc[1,3:5].sum()) / pop_서울* 100\n부산_유소년_비율 = (pop.iloc[2,3:5].sum()) / pop_부산* 100\n대구_유소년_비율 = (pop.iloc[3,3:5].sum()) / pop_대구* 100\n인천_유소년_비율 = (pop.iloc[4,3:5].sum()) / pop_인천* 100\n광주_유소년_비율 = (pop.iloc[5,3:5].sum()) / pop_광주* 100\n대전_유소년_비율 = (pop.iloc[6,3:5].sum()) / pop_대전* 100\n울산_유소년_비율 = (pop.iloc[7,3:5].sum()) / pop_울산* 100\n세종_유소년_비율 = (pop.iloc[8,3:5].sum()) / pop_세종* 100\n경기_유소년_비율 = (pop.iloc[9,3:5].sum()) / pop_경기* 100\n강원_유소년_비율 = (pop.iloc[10,3:5].sum()) / pop_강원* 100\n충북_유소년_비율 = (pop.iloc[11,3:5].sum()) / pop_충북* 100\n충남_유소년_비율 = (pop.iloc[12,3:5].sum()) / pop_충남* 100\n전북_유소년_비율 = (pop.iloc[13,3:5].sum()) / pop_전북* 100\n전남_유소년_비율 = (pop.iloc[14,3:5].sum()) / pop_전남* 100\n경북_유소년_비율 = (pop.iloc[15,3:5].sum()) / pop_경북* 100\n경남_유소년_비율 = (pop.iloc[16,3:5].sum()) / pop_경남* 100\n제주_유소년_비율 = (pop.iloc[17,3:5].sum()) / pop_제주* 100\n\n\n서울_성인_비율 = (pop.iloc[1,5:9].sum()) / pop_서울 * 100\n부산_성인_비율 = (pop.iloc[2,5:9].sum()) / pop_부산* 100\n대구_성인_비율 = (pop.iloc[3,5:9].sum()) / pop_대구* 100\n인천_성인_비율 = (pop.iloc[4,5:9].sum()) / pop_인천* 100\n광주_성인_비율 = (pop.iloc[5,5:9].sum()) / pop_광주* 100\n대전_성인_비율 = (pop.iloc[6,5:9].sum()) / pop_대전* 100\n울산_성인_비율 = (pop.iloc[7,5:9].sum()) / pop_울산* 100\n세종_성인_비율 = (pop.iloc[8,5:9].sum()) / pop_세종* 100\n경기_성인_비율 = (pop.iloc[9,5:9].sum()) / pop_경기* 100\n강원_성인_비율 = (pop.iloc[10,5:9].sum()) / pop_강원* 100\n충북_성인_비율 = (pop.iloc[11,5:9].sum()) / pop_충북* 100\n충남_성인_비율 = (pop.iloc[12,5:9].sum()) / pop_충남* 100\n전북_성인_비율 = (pop.iloc[13,5:9].sum()) / pop_전북* 100\n전남_성인_비율 = (pop.iloc[14,5:9].sum()) / pop_전남* 100\n경북_성인_비율 = (pop.iloc[15,5:9].sum()) / pop_경북* 100\n경남_성인_비율 = (pop.iloc[16,5:9].sum()) / pop_경남* 100\n제주_성인_비율 = (pop.iloc[17,5:9].sum()) / pop_제주* 100\n\n\n서울_노인_비율 = (pop.iloc[1,9:14].sum()) / pop_서울 * 100\n부산_노인_비율 = (pop.iloc[2,9:14].sum()) / pop_부산* 100\n대구_노인_비율 = (pop.iloc[3,9:14].sum()) / pop_대구* 100\n인천_노인_비율 = (pop.iloc[4,9:14].sum()) / pop_인천* 100\n광주_노인_비율 = (pop.iloc[5,9:14].sum()) / pop_광주* 100\n대전_노인_비율 = (pop.iloc[6,9:14].sum()) / pop_대전* 100\n울산_노인_비율 = (pop.iloc[7,9:14].sum()) / pop_울산* 100\n세종_노인_비율 = (pop.iloc[8,9:14].sum()) / pop_세종* 100\n경기_노인_비율 = (pop.iloc[9,9:14].sum()) / pop_경기* 100\n강원_노인_비율 = (pop.iloc[10,9:14].sum()) / pop_강원* 100\n충북_노인_비율 = (pop.iloc[11,9:14].sum()) / pop_충북* 100\n충남_노인_비율 = (pop.iloc[12,9:14].sum()) / pop_충남* 100\n전북_노인_비율 = (pop.iloc[13,9:14].sum()) / pop_전북* 100\n전남_노인_비율 = (pop.iloc[14,9:14].sum()) / pop_전남* 100\n경북_노인_비율 = (pop.iloc[15,9:14].sum()) / pop_경북* 100\n경남_노인_비율 = (pop.iloc[16,9:14].sum()) / pop_경남* 100\n제주_노인_비율 = (pop.iloc[17,9:14].sum()) / pop_제주* 100\n\n\n\n인구 비율 DataFrame 만들기\n\npop_ratio = pd.DataFrame({ \\ \n            'region' = ['서울', '부산', '대구', '인천', '광주', '대전', '울산', '세종', '경기도', '강원도',\n                        '충청북도', '충청남도', '전라북도', '전라남도', '경상북도', '경상남도', '제주도'],\n            '유소년비율' = [서울_유소년_비율, 부산_유소년_비율, 대구_유소년_비율, 인천_유소년_비율, 광주_유소년_비율, 대전_유소년_비율, 울산_유소년_비율, 세종_유소년_비율, 경기_유소년_비율, 강원_유소년_비율,\n충북_유소년_비율, 충남_유소년_비율, 전북_유소년_비율, 전남_유소년_비율, 경북_유소년_비율, 경남_유소년_비율,\n제주_유소년_비율], \n        : [서울_유소년_비율, 서울_성인_비율, 서울_노인_비율],\n        : [부산_유소년_비율, 부산_성인_비율, 부산_노인_비율],\n        : [대구_유소년_비율, 대구_성인_비율, 대구_노인_비율],\n        : [인천_유소년_비율, 인천_성인_비율, 인천_노인_비율],\n        : [광주_유소년_비율, 광주_성인_비율, 광주_노인_비율],\n        : [대전_유소년_비율, 대전_성인_비율, 대전_노인_비율],\n        : [울산_유소년_비율, 울산_성인_비율, 울산_노인_비율],\n        : [세종_유소년_비율, 세종_성인_비율, 세종_노인_비율],\n       : [경기_유소년_비율, 경기_성인_비율, 경기_노인_비율],\n       : [강원_유소년_비율, 강원_성인_비율, 강원_노인_비율],\n      : [충북_유소년_비율, 충북_성인_비율, 충북_노인_비율],\n      : [충남_유소년_비율, 충남_성인_비율, 충남_노인_비율],\n      : [전북_유소년_비율, 전북_성인_비율, 전북_노인_비율],\n      : [전남_유소년_비율, 전남_성인_비율, 전남_노인_비율],\n      : [경북_유소년_비율, 경북_성인_비율, 경북_노인_비율],\n      : [경남_유소년_비율, 경남_성인_비율, 경남_노인_비율],\n       : [제주_유소년_비율, 제주_성인_비율, 제주_노인_비율]\n  })\n\npop_ratio.index = ['age_under_20','age_2050','age_over_60']\n\npivot 만들기\n\npop_ratio_new = pop_ratio.pivot(index = \")\n\n\n\n\n이전 데이터 불러오기\n\n# 데이터 불러오기\nmarket = pd.read_excel(\"data/traditionalmarket.xlsx\")\n\n# 분석을 위한 복사본 만들기\nmarket2 = market.copy()\n\n\n# 엑셀의 변수 한글을 영어로 rename\nmarket2 = market2.rename(columns = {\"시장명\"              : \"market_name\", \n                                    \"시장유형\"            : \"type\",\n                                    \"소재지도로명주소\"    : \"adress_road\",\n                                    \"시장개설주기\"        : \"open_period\",\n                                    \"소재지지번주소\"      : \"address_old\",\n                                    \"점포수\"              : \"market_count\",\n                                    \"사용가능상품권\"      : \"certificate\",\n                                    \"공중화장실 보유여부\" :\"public_toilet\",\n                                    \"주차장 보유여부\"     : \"parking_lot\",\n                                    \"개설년도\"            : \"year\",\n                                    \"데이터기준일자\"      : \"data_date\"})\n\n\n# 데이터의 정보 확인하기\nmarket2.describe()\nmarket2[\"public_toilet\"].info()\nmarket2[\"parking_lot\"].info()\nmarket2['market_count'].describe()\n\n\n# 점포수에 따른 규모 크기를 설명해주는 변수 만들기\nmarket2 = market2.assign(market_scale = np.where(market2[\"market_count\"] &gt;= 134, \"large\", \n                                        np.where(market2[\"market_count\"] &gt;= 50, \"medium\", \"small\")))\n\n# 편의시설의 유무에 따른 레벨링 하기\nmarket2['level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\n\n\n# 확인 절차\nmarket2.head()\n\n\n# 그래프 그리기\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# x축을 편의 시설 레벨\nsns.countplot(data = market2, x = 'level', hue = 'level')\nplt.show()\n\n# 그래프 그리기 위한 df 생성\n# 시장 유형와 규모 크기에 따른 그룹화 / 규모 크기 갯수 추가\ndf = market2.groupby([\"type\", \"market_scale\"], as_index = False) \\\n            .agg(market_count = (\"market_scale\", \"count\"))\n\n# 규모 크기에 따른 내림차순\ndf.sort_values('market_count', ascending = False)\n\n# 만든 df를 x축에 시장 유형, y축은 규모 크기에 따른 점포 갯수\nsns.barplot(data = df, x = 'type', y = 'market_count', hue = 'market_scale')\nplt.show()\n\n\nplt.clf()\n\n\nmarket2['region'] = market2['adress_road'].str.split().str[0]\nmarket2"
  }
]